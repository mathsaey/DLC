# dis.py
# Mathijs Saey
# DLC

# This module contains a class which represents a
# DIS version thats being created.

import StringIO

class DIS(object):
	def __init__(self, inputs):
		super(DIS, self).__init__()
		self.chunks  = 2
		self.inputs  = inputs
		self.indent  = 0
		self.keys    = [0  for i in xrange(0, self.chunks)]
		self.memory  = [[] for i in xrange(0, self.chunks)]

		self.addPredefined(inputs)

	def addPredefined(self, inputs):
		self.addCommentLine("Program entry and exit point", 0)
		self.addInstruction(0, 'BGN', [inputs])
		self.addInstruction(0, 'STP', [])
		self.addNewline(0)


	# Basic Operations
	# ----------------

	def addString(self, str, chunk):
		lst = self.memory[chunk]
		str = "%s%s" % (self.indent * '\t', str)
		lst.append(str)

	def addKeyedString(self, str, chunk):
		key = self.keys[chunk]
		self.keys[chunk] += 1
		str = str % key

		str = "%s%s" % (self.indent * '\t', str)
		self.memory[chunk].append(str)
		return (chunk, key)

	def addNewline(self, chunk):
		self.addString('', chunk)

	def addNewlines(self):
		for c in xrange(0, self.chunks):
			self.addNewline(c)

	def addCommentLine(self, comment, chunk):
		self.addString('$ %s' % comment, chunk)

	def addCommentLines(self, comment):
		for c in xrange(0, self.chunks):
			self.addCommentLine(comment, c)

	def createChunk(self, idx):
		return "CHUNK %d" % idx

	def currentKey(self, chunk):
		return self.keys[chunk]

	# DIS Elements
	# ------------

	def addInstruction(self, chunk, type, args):
		argStr = " ".join(map(str, args))
		ins = "INST %s %s %s" % (type, '%d', argStr)
		return self.addKeyedString(ins, chunk)

	def addLiteral(self, chunk, key, port, value):
		str = "LITR %d %d <= %s" % (key, port, value)
		self.addString(str, chunk)

	def addLink(self, fChunk, fKey, fPort, tChunk, tKey, tPort):
		str = "LINK %d %d %d -> %d %d %d" % (
			fChunk, fKey, fPort,
			tChunk, tKey, tPort)

		self.addString(str, fChunk)

	def linkStart(self, chunk, key):
		for i in xrange(0, self.inputs):
			self.addLink(0, 0, i, chunk, key, i)

	def linkStop(self, chunk, key):
		self.addLink(chunk, key, 0, 0, 1, 0)

	# Generation
	# ----------

	def generate(self):
		buffer = StringIO.StringIO()
		buffer.write('$ Generated by DLC \n\n')

		for i in xrange(0, len(self.memory)):
			buffer.write(self.createChunk(i))
			buffer.write('\n')

			chunk = self.memory[i]
			for str in chunk:
				buffer.write(str)
				buffer.write('\n')

			buffer.write('\n')

		res = buffer.getvalue()
		buffer.close()
		return res